using System;


namespace ConsoleApp
{

    class PlasticCar
    {
        // Публичное поле, их лучше не использовать в проектах
        public string Name = "Default";


        // Свойство обёртка над приватным полем, в данном случае с частичным доступом
        // имеет только геттер, сеттера нет, поэтому нельзя ничего присваивать
        // неявного поля для хранения не создаётся
        // под капотом создаётся метод, который возвращает строку
        public string CarNumber { get { return "A000AA"; }}


        // Явная реализация свойства
        // обязательно создаётся приватное поле, которое будет непосредственно хранить данные
        private int speed;
        public int Speed
        {
            // геттер - метод, который будет вызываться при обращении (чтение) к свойству
            // возвращаем приватное поле
            get
            {
                return speed;
            }
            // сеттер - метод, которвый вызывается при изменении поля
            // данный сеттер с модификатором доступа, т.е. изменить свойство можно будет только в сборке
            internal set
            {
                // проверка на неотрицательность, пример контролируемого доступа к полю
                // опять обращаемся к приватному полю, устанавливаем ему значение
                // здесь может быть написана любая логика, но лучше не переусердствовать
                if (value <= 0) throw new Exception("Скорость должна быть ненулевой!");
                else speed = value;
            }
        }

        // Неявная реализация свойства
        // Свойство с раздельным доступом, читать можно будет везде, а записывать только внутри этого класса
        // под капотом компилятор создаст приватное поле, которое будет хранить данные
        // по-хорошему нужно реализовать явно и добавить проверку на неотрицательность,
        // чтобы не возникало отложенных ошибок
        public int Price { get; private set; }


        // Неправильное свойство!
        // Мы каждый раз обращаемся к свойству, а свойство - это метод(ы),
        // и каждый раз метод будет вызываться внутри самого себя
        // БЕСКОНЕЧНАЯ РЕКУРСИЯ, ошибка переполнения стека (вызовов)
        // при явной реализации свойства ОБЯЗАТЕЛЬНО нужно создавать приватное поле
        // и обращась к приватному полю (а не к методу, как сейчас) рекурсия возникать не будет
        public int SomeInvalidProperty
        {
            get { return SomeInvalidProperty; }
            set { SomeInvalidProperty = value; }
        }

        // Свойство, которое оборачивает метод, т.е. обращаемся как к полю, а на самом деле вызываем метод
        // под капотом никакого поля не будет создаваться, только один метод
        // при чтении поля срабатывает единственный метод, который вычисляет операцию и возвращает результат
        public double SpeedPerBucks
        {
            get
            {
                var ans = (double)Speed / Price;
                return ans;
            }
        }

        // Конструктор, чтобы установить поле
        // вместо поля обращаемся к свойству, вызывается сеттер, хотя можем обратиться и напрямую к полю
        // с помощью конструктора можем установить свойство Price, извне класса доступа на запись нет
        public PlasticCar(int price)
        {
            //Выводим объект до каких-либо присваиваний, убеждаемся, что мусор чистится 
            Console.WriteLine(this.ToString());
            Console.WriteLine("CONSTRUCTOR of PlasticCar");
            Price = price;
        }

        // Традиционное переопределение метода ToString()
        public override string ToString()
        {
            return String.Format($"Car:: Name = \"{Name}\", Speed = {Speed}, Price = {Price};");
        }
    }




    public class Program
    {

        public static void Main()
        {
            // Создаём объект
            var objCar = new PlasticCar(100) { Name = "Toyota" };
            
            // Смотрим значение свойств 
            Console.WriteLine(objCar.ToString());

            // изменяем поле
            Console.WriteLine("New Speed: " + (objCar.Speed = 120));

            //ОШИБКА, сработает проверка в сеттере, которая бросит исключение
            //objCar.Speed = 0;

            //ОШИБКА, нет прав на запись (модификацию)
            //objCar.Price = 120; 

            // ещё раз смотрим значение свойств 
            Console.WriteLine(objCar.ToString());

            // обращаемся к свойству, которое вычисляется на ходу в момент чтения
            Console.WriteLine(objCar.SpeedPerBucks);


        }

    }

}